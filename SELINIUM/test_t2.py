# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestT2():
  def setup_method(self, method):
    self.driver = webdriver.Remote(command_executor='http://localhost:4444/wd/hub', desired_capabilities=DesiredCapabilities.CHROME)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_t2(self):
    # Test name: T2
    # Step # | name | target | value
    # 1 | open | http://127.0.0.1:5503/SElogin.html | 
    self.driver.get("http://127.0.0.1:5503/SElogin.html")
    # 2 | setWindowSize | 1050x590 | 
    self.driver.set_window_size(1050, 590)
    # 3 | click | css=.userid | 
    self.driver.find_element(By.CSS_SELECTOR, ".userid").click()
    # 4 | type | css=.userid | SAM
    self.driver.find_element(By.CSS_SELECTOR, ".userid").send_keys("SAM")
    # 5 | click | css=.top > div:nth-child(4) | 
    self.driver.find_element(By.CSS_SELECTOR, ".top > div:nth-child(4)").click()
    # 6 | click | css=.password | 
    self.driver.find_element(By.CSS_SELECTOR, ".password").click()
    # 7 | type | css=.password | ABFES
    self.driver.find_element(By.CSS_SELECTOR, ".password").send_keys("ABFES")
    # 8 | click | css=.login-button | 
    self.driver.find_element(By.CSS_SELECTOR, ".login-button").click()
    # 9 | click | css=.sidebar-link:nth-child(1) | 
    self.driver.find_element(By.CSS_SELECTOR, ".sidebar-link:nth-child(1)").click()
    # 10 | click | css=.voice-search | 
    self.driver.find_element(By.CSS_SELECTOR, ".voice-search").click()
    # 11 | click | css=.search-icon | 
    self.driver.find_element(By.CSS_SELECTOR, ".search-icon").click()
    # 12 | click | css=.subpart:nth-child(2) .aboutdevice | 
    self.driver.find_element(By.CSS_SELECTOR, ".subpart:nth-child(2) .aboutdevice").click()
    # 13 | click | css=a > .instagram | 
    self.vars["window_handles"] = self.driver.window_handles
    # 14 | storeWindowHandle | root | 
    self.driver.find_element(By.CSS_SELECTOR, "a > .instagram").click()
    # 15 | selectWindow | handle=${win1136} | 
    self.vars["win1136"] = self.wait_for_window(2000)
    # 16 | selectWindow | handle=${root} | 
    self.vars["root"] = self.driver.current_window_handle
    self.driver.switch_to.window(self.vars["win1136"])
    self.driver.switch_to.window(self.vars["root"])
  
